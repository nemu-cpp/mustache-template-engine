# This file was automatically generated by bakefile.
#
# Any manual changes will be lost if it is regenerated,
# modify the source .bkl file instead if possible.

# You may define standard make variables such as CFLAGS or
# CXXFLAGS to affect the build. For example, you could use:
#
#      make CXXFLAGS=-g
#
# to build with debug information. The full list of variables
# that can be used by this makefile is:
# AR, CC, CFLAGS, CPPFLAGS, CXX, CXXFLAGS, LD, LDFLAGS, MAKE, RANLIB.

# You may also specify config=Debug|Release
# or their corresponding lower case variants on make command line to select
# the corresponding default flags values.
ifeq ($(config),debug)
override config := Debug
endif
ifeq ($(config),release)
override config := Release
endif
ifeq ($(config),Debug)
override CPPFLAGS += -DDEBUG
override CFLAGS += -g -O0
override CXXFLAGS += -g -O0
override LDFLAGS += -g
else ifeq ($(config),Release)
override CPPFLAGS += -DNDEBUG
override CFLAGS += -O2
override CXXFLAGS += -O2
else ifneq (,$(config))
$(warning Unknown configuration "$(config)")
endif
#
# Additionally, this makefile is customizable with the following
# settings:
#
#      ISHIKO_CPP_BASEPLATFORM_ROOT  Path to the Ishiko BasePlatform installation
#      ISHIKO_CPP_ERRORS_ROOT        Path to the Ishiko Errors installation
#      ISHIKO_CPP_BOOST_ROOT         Path to the Boost installation
#      ISHIKO_CPP_TEXT_ROOT          Path to the Ishiko/Text installation
#      ISHIKO_CPP_PROCESS_ROOT       Path to the Ishiko Process installation
#      MSTCH_ROOT                    Path to the mstch installation
#      ISHIKO_CPP_MEMORY_ROOT        Path to the Ishiko/C++ Memory installation
#      ISHIKO_CPP_BOTAN_ROOT         Path to the Botan installation
#      ISHIKO_CPP_NETWORKING_ROOT    Path to the Ishiko Networking installation
#      ISHIKO_CPP_FMT_ROOT           Path to the fmt installation
#      ISHIKO_CPP_TIME_ROOT          Path to the Ishiko Timeinstallation
#      ISHIKO_CPP_TYPES_ROOT         Path to the Ishiko Types installation
#      ISHIKO_CPP_HTTP_ROOT          Path to the Ishiko HTTP installation
#      ISHIKO_CPP_FILESYSTEM_ROOT    Path to the Ishiko FileSystem installation
#      ISHIKO_CPP_LOGGING_ROOT       Path to the Ishiko Logging installation
#      NEMU_CPP_CORE_ROOT            Path to the Nemu installation
#      NEMU_CPP_WEBFRAMEWORK_ROOT    Path to the Nemu WebFramework installation

# Use "make RANLIB=''" for platforms without ranlib.
RANLIB ?= ranlib

CC := cc
CXX := c++

_true  := true
_false :=
_not    = $(if $(1),$(_false),$(_true_))
_equal  = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))


# The directory for the build files, may be overridden on make command line.
builddir = .

ifneq ($(builddir),.)
_builddir := $(if $(findstring $(abspath $(builddir)),$(builddir)),,../../)$(builddir)/../gnumake/
_builddir_error := $(shell mkdir -p $(_builddir) 2>&1)
$(if $(_builddir_error),$(error Failed to create build directory: $(_builddir_error)))
endif

# ------------
# Configurable settings:
# 

# Path to the Ishiko BasePlatform installation
ISHIKO_CPP_BASEPLATFORM_ROOT ?= $(ISHIKO_CPP)/base-platform
# Path to the Ishiko Errors installation
ISHIKO_CPP_ERRORS_ROOT ?= $(ISHIKO_CPP)/errors
# Path to the Boost installation
ISHIKO_CPP_BOOST_ROOT ?= $(ISHIKO_CPP_THIRD_PARTY_BOOST)
# Path to the Ishiko/Text installation
ISHIKO_CPP_TEXT_ROOT ?= $(ISHIKO_CPP)/text
# Path to the Ishiko Process installation
ISHIKO_CPP_PROCESS_ROOT ?= $(ISHIKO_CPP)/process
# Path to the mstch installation
MSTCH_ROOT ?= $(MSTCH)
# Path to the Ishiko/C++ Memory installation
ISHIKO_CPP_MEMORY_ROOT ?= $(ISHIKO_CPP)/memory
# Path to the Botan installation
ISHIKO_CPP_BOTAN_ROOT ?= $(ISHIKO_CPP_THIRD_PARTY_BOTAN)
# Path to the Ishiko Networking installation
ISHIKO_CPP_NETWORKING_ROOT ?= $(ISHIKO_CPP)/networking
# Path to the fmt installation
ISHIKO_CPP_FMT_ROOT ?= $(ISHIKO_CPP_THIRD_PARTY_FMT)
# Path to the Ishiko Timeinstallation
ISHIKO_CPP_TIME_ROOT ?= $(ISHIKO_CPP)/time
# Path to the Ishiko Types installation
ISHIKO_CPP_TYPES_ROOT ?= $(ISHIKO_CPP)/types
# Path to the Ishiko HTTP installation
ISHIKO_CPP_HTTP_ROOT ?= $(ISHIKO_CPP)/http
# Path to the Ishiko FileSystem installation
ISHIKO_CPP_FILESYSTEM_ROOT ?= $(ISHIKO_CPP)/filesystem
# Path to the Ishiko Logging installation
ISHIKO_CPP_LOGGING_ROOT ?= $(ISHIKO_CPP)/logging
# Path to the Nemu installation
NEMU_CPP_CORE_ROOT ?= $(NEMU_CPP)/core
# Path to the Nemu WebFramework installation
NEMU_CPP_WEBFRAMEWORK_ROOT ?= $(NEMU_CPP)/web-framework

# ------------

all: ../bakefile/../../lib/lib$(if $(call _equal,$(config),Debug),NemuMustacheTemplateEngine-d,NemuMustacheTemplateEngine).a

../bakefile/../../lib/lib$(if $(call _equal,$(config),Debug),NemuMustacheTemplateEngine-d,NemuMustacheTemplateEngine).a: $(_builddir)NemuMustacheTemplateEngine_MustacheTemplateEngine.o
	$(AR) rc $@ $(_builddir)NemuMustacheTemplateEngine_MustacheTemplateEngine.o
	$(RANLIB) $@

$(_builddir)NemuMustacheTemplateEngine_MustacheTemplateEngine.o: ../../src/MustacheTemplateEngine.cpp
	$(CXX) -c -o $@ $(CPPFLAGS) $(CXXFLAGS) -MD -MP -fPIC -DPIC -pthread -I$(ISHIKO_CPP_ERRORS_ROOT)/include -I$(ISHIKO_CPP_BASEPLATFORM_ROOT)/include -I$(ISHIKO_CPP_BOOST_ROOT)/include -I$(ISHIKO_CPP_TEXT_ROOT)/include -I$(ISHIKO_CPP_MEMORY_ROOT)/include -I$(ISHIKO_CPP_BOTAN_ROOT)/include/botan-2 -I$(ISHIKO_CPP_NETWORKING_ROOT)/include -I$(ISHIKO_CPP_FILESYSTEM_ROOT)/include -I$(ISHIKO_CPP_FMT_ROOT)/include -I$(ISHIKO_CPP_TIME_ROOT)/include -I$(ISHIKO_CPP_LOGGING_ROOT)/include -I$(NEMU_CPP_CORE_ROOT)/include -I$(ISHIKO_CPP_TYPES_ROOT)/include -I$(ISHIKO_CPP_HTTP_ROOT)/include -I$(NEMU_CPP_WEBFRAMEWORK_ROOT)/include -I$(ISHIKO_CPP_PROCESS_ROOT)/include -I$(MSTCH_ROOT)/include -I../../include/Nemu/MustacheTemplateEngine -std=c++11 ../../src/MustacheTemplateEngine.cpp

clean:
	rm -f $(_builddir)*.o
	rm -f $(_builddir)*.d
	rm -f ../bakefile/../../lib/lib$(if $(call _equal,$(config),Debug),NemuMustacheTemplateEngine-d,NemuMustacheTemplateEngine).a

.PHONY: all clean

# Dependencies tracking:
-include $(_builddir)*.d
